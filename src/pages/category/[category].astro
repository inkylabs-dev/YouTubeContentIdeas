---
import Layout from '../../layouts/Layout.astro';
import Navbar from '../../components/Navbar.astro';
import Footer from '../../components/Footer.astro';
import ContentIdeaCard from '../../components/ContentIdeaCard';
import { Badge } from '../../components/ui/badge';
import { Input } from '../../components/ui/input';
import { contentIdeas } from '../../data/contentIdeas';
import { categories, getCategoryBySlug } from '../../data/categories';

export async function getStaticPaths() {
  return categories.map((category) => ({
    params: { category: category.slug },
  }));
}

const { category } = Astro.params;
const categoryData = getCategoryBySlug(category);

if (!categoryData) {
  return Astro.redirect('/');
}

const categoryIdeas = contentIdeas.filter(idea => 
  idea.category.toLowerCase() === categoryData.name.toLowerCase()
);
---

<Layout 
  title={`${categoryData.name} YouTube Content Ideas - Video Ideas for ${categoryData.name} Creators`}
  description={`Explore ${categoryData.name.toLowerCase()} YouTube content ideas. ${categoryData.description} Find trending video concepts to engage your audience and grow your channel.`}
>
  <Navbar />
  
  <main class="min-h-screen">
    <!-- Hero Section -->
    <section class="relative py-8 md:py-12">
      <div class="container">
        
        <div class="text-center">
          <h1 class="text-4xl font-bold tracking-tight sm:text-5xl lg:text-6xl mb-6">
            {categoryData.name} 
            <span class="bg-gradient-to-r from-red-500 to-red-600 bg-clip-text text-transparent">
              YouTube Content Ideas
            </span>
          </h1>
          <p class="text-lg leading-8 text-muted-foreground max-w-2xl mx-auto mb-8">
            {categoryData.description}
          </p>
          
          <div class="max-w-md mx-auto">
            <div class="relative">
              <svg class="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
              <Input
                type="text"
                id="searchInput"
                placeholder={`Search ${categoryData.name.toLowerCase()} ideas...`}
                className="pl-10 h-12 text-base"
              />
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Content Ideas -->
    <section class="py-16 bg-muted/50">
      <div class="container">
        <div id="contentGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {categoryIdeas.map((idea) => {
            const difficulty = ['Easy', 'Medium', 'Hard'][Math.floor(Math.random() * 3)] as "Easy" | "Medium" | "Hard";
            const estimatedViews = ['1K-10K', '10K-100K', '100K-1M', '1M+'][Math.floor(Math.random() * 4)];
            
            return (
              <div data-title={idea.title.toLowerCase()} data-description={idea.description.toLowerCase()} data-tags={idea.tags.join(' ').toLowerCase()}>
                <ContentIdeaCard
                  title={idea.title}
                  description={idea.description}
                  category={idea.category}
                  difficulty={difficulty}
                  estimatedViews={estimatedViews}
                  client:load
                />
              </div>
            );
          })}
        </div>

        <!-- No Results Message -->
        <div id="noResults" class="hidden text-center py-12">
          <h3 class="text-xl text-muted-foreground mb-4">No content ideas found</h3>
          <p class="text-muted-foreground">Try adjusting your search criteria</p>
        </div>
        
        <!-- No Ideas Available Message -->
        {categoryIdeas.length === 0 && (
          <div class="text-center py-12">
            <h3 class="text-xl text-muted-foreground mb-4">No content ideas available yet</h3>
            <p class="text-muted-foreground mb-6">We're working on adding more {categoryData.name.toLowerCase()} content ideas!</p>
            <div class="space-y-2 text-sm text-muted-foreground">
              <p>üí° Try exploring other categories</p>
              <p>üîç Use the search to find ideas across all topics</p>
              <p>üì∫ Check back soon for new {categoryData.name.toLowerCase()} ideas</p>
            </div>
          </div>
        )}
      </div>
    </section>

    <!-- Related Categories -->
    <section class="py-16">
      <div class="container">
        <div class="text-center mb-8">
          <h2 class="text-3xl font-bold tracking-tight mb-4">Explore Other Categories</h2>
          <p class="text-muted-foreground">Discover more content ideas across different topics</p>
        </div>
        
        <div class="flex flex-wrap justify-center gap-2">
          {categories
            .filter(cat => cat.slug !== category)
            .slice(0, 12)
            .map((cat) => (
              <Badge variant="outline" asChild>
                <a 
                  href={`/category/${cat.slug}`}
                  class="hover:bg-accent transition-colors"
                >
                  {cat.name}
                </a>
              </Badge>
            ))
          }
        </div>
      </div>
    </section>
  </main>

  <Footer />

  <script>
    // Search functionality
    const searchInput = document.getElementById('searchInput') as HTMLInputElement;
    const contentGrid = document.getElementById('contentGrid') as HTMLElement;
    const noResults = document.getElementById('noResults') as HTMLElement;

    function filterContent() {
      const searchTerm = searchInput.value.toLowerCase();
      const cards = contentGrid.querySelectorAll('[data-title]') as NodeListOf<HTMLElement>;
      let visibleCount = 0;

      cards.forEach(card => {
        const title = card.getAttribute('data-title') || '';
        const description = card.getAttribute('data-description') || '';
        const tags = card.getAttribute('data-tags') || '';

        const matchesSearch = !searchTerm || 
          title.includes(searchTerm) || 
          description.includes(searchTerm) || 
          tags.includes(searchTerm);

        if (matchesSearch) {
          card.style.display = 'block';
          visibleCount++;
        } else {
          card.style.display = 'none';
        }
      });

      if (visibleCount === 0) {
        noResults.classList.remove('hidden');
        contentGrid.classList.add('hidden');
      } else {
        noResults.classList.add('hidden');
        contentGrid.classList.remove('hidden');
      }
    }

    searchInput.addEventListener('input', filterContent);
  </script>
</Layout>